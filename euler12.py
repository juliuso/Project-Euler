#!/usr/bin/env python

# EULER 12
# 
# PROBLEM:
# 
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be:
#
	# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
#
# The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 	
#
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

# AUTHOR: jo
# DATE:   20-OCT-2011

numberOfDivisors = 500
initial = 0
while 1 > 0:
	divisorCount = 0
	initial += 1
	triangle = sum(xrange(initial))

	for i in range(1, int((triangle+1)**0.5)):
		if triangle% i == 0:
			divisorCount += 2
		else:
			continue

	if divisorCount < numberOfDivisors:
		print divisorCount
		continue
	else:
		if divisorCount >= numberOfDivisors:
			print "The triangle number is: %i" % triangle
			print "It has %i divisors\n" % divisorCount

			raw_input("Press any key to continue.")
			break

#ans. 76576500, 576 divisors

#notes: The key is to limit the upper-bround range of the for loop
#to the square-root of the triangle number. Because factors come in pairs,
#we test the lower half of the range. Values that divide without remainder
#are counted twice to account for the corresponding pair value.