#!/usr/bin/env python

# EULER 12
# 
# PROBLEM:
# 
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be:
#
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
#
# The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

# AUTHOR: jo
# DATE:   10-JUL-2011

# 1. Calculate all the triangle numbers to a certain range.
# 2. Calculate divisors for each triangle number. if T%i == 0, keep i.
# 3. If len(divisors) <=500 (or 501), break, and return triangle number.
		
a = range(100000)
triangle = []
numDivisors = 500

def numFactors(n):
	divisors = []
	for i in range(1, n+1):
		if n%i == 0:
			divisors.append(i)
	return len(divisors)
	
# finding the triangles
for i in a:
	triangle.append(sum(a[:i]))

for i in triangle:
	if numFactors(i) < numDivisors:
		print "less than numDivisors %i" % i
	elif numFactors(i) == numDivisors:
		print "equal to numDivisors %i" % i
		break